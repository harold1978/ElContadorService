@page "/CuentaContables"
@using FrontElContador.Models
@inject HttpClient http


<h3>Cuenta Contables Index</h3>

<div class="container">
  
        <div class="mb-3 row">
            <label for="Id" class="col-4 col-form-label">ID</label>
            <div class="col-8">
                <input type="text"
                    disabled
                       class="form-control"
                       name="Id"
                       id="Id"
                       @bind="Cuenta.Id" />
            </div>
        </div>
    <div class="mb-3 row">
        <label for="Codigo" class="col-4 col-form-label">CODIGO</label>
        <div class="col-8">
            <input type="text"
                   class="form-control"
                   name="Codigo"
                   id="Codigo"
                   @bind="Cuenta.Codigo"
                   placeholder="Escribe el codigo de la cuenta" />
        </div>
    </div>
    <div class="mb-3 row">
        <label for="Nombre" class="col-4 col-form-label">NOMBRE</label>
        <div class="col-8">
            <input type="text"
                   class="form-control"
                   name="Nombre"
                   id="Nombre"
                   @bind="Cuenta.Nombre"
                   placeholder="Escribe el nombre de la cuenta" />
        </div>
    </div>
    <div class="mb-3 row">
        <label for="Tipo" class="col-4 col-form-label">TIPO</label>
        <div class="col-8">
            <select class="form-control" @bind="Cuenta.Tipo" >
                <option value="Ingreso">Ingreso</option>
                <option value="Pasivo">Pasivo</option>
                <option value="Patrimonio">Patrimonio</option>
            </select>
   @*          <input type="text"
                   class="form-control"
                   name="Tipo"
                   id="Tipo"
                   placeholder="Escri" /> *@
        </div>
    </div>
    <div class="mb-3 row">
        <label for="Saldo" class="col-4 col-form-label">SALDO</label>
        <div class="col-8">
            <input type="number"
                   class="form-control"
                   name="Saldo"
                   id="Saldo"
                   @bind="Cuenta.Saldo" />
        </div>
    </div>
       
        <div class="mb-3 row">
            <div class="offset-sm-4 col-sm-8">
                <button type="button" @onclick="procesar" class="btn btn-primary">
                    Procesar
                </button>
            </div>
        </div>

</div>

<table class="table table-striped table-hover table-primary table-sm">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Codigo</th>
            <th>Nombre</th>
            <th>Tipo</th>
            <th>Saldo</th>
            <th>Comados</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var c in Cuentas!)
        {
            <tr>
                <td>@c.Id</td>
                <td>@c.Codigo</td>
                <td>@c.Nombre</td>
                <td>@c.Tipo</td>
                <td>@c.Saldo</td>
                <td>
                    <button type="button" class="btn btn-success btn-sm" @onclick="(()=>Actualizar(c))">Editar</button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="(()=>Eliminar(c.Id))">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<CuentaContable>? Cuentas = new List<CuentaContable>();

    private CuentaContable Cuenta = new CuentaContable();

    private async Task procesar()
    {
        if (Cuenta.Id==0)
        {
            var resp = await http.PostAsJsonAsync("/api/CuentaContables", Cuenta);
            if (resp.IsSuccessStatusCode)
            {
                limpiar();
                await cargar();    
            }
        }
        if (Cuenta.Id!=0)
        {
            var asnw = await http.PutAsJsonAsync("/api/CuentaContables/"+Cuenta.Id, Cuenta);
            if (asnw.IsSuccessStatusCode)
            {
                limpiar();
                await cargar();
            }
        }
    }
    private async Task cargar()
    {
        Cuentas = await http.GetFromJsonAsync<List<CuentaContable>>("/api/CuentaContables");
    }
    private void limpiar()
    {
        Cuenta.Id = 0;
        Cuenta.Nombre = "";
        Cuenta.Codigo = "";
        Cuenta.Tipo = "";
        Cuenta.Saldo = 0;
    }

    private async Task Eliminar(int id)
    {
        var resp = await http.DeleteAsync("/api/CuentaContables/"+id);
        if (resp.IsSuccessStatusCode)
        {
            await cargar();    
        }
    }

    private void Actualizar(CuentaContable c)
    {
        Cuenta = c;
    }


    protected override async Task OnInitializedAsync() => await  cargar();


}
